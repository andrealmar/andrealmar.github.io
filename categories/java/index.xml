<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on This Coding Life</title>
    <link>http://andrealmar.com/categories/java/</link>
    <description>Recent content in Java on This Coding Life</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>andre@y7mail.com (André Almar)</managingEditor>
    <webMaster>andre@y7mail.com (André Almar)</webMaster>
    <copyright>© 2016 Andre Almar, All Rights Reserved</copyright>
    <lastBuildDate>Mon, 22 Jun 2015 14:00:27 -0300</lastBuildDate>
    <atom:link href="http://andrealmar.com/categories/java/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to configure proxy in Play Framework</title>
      <link>http://andrealmar.com/2015/06/how-to-configure-proxy-in-play-framework/</link>
      <pubDate>Mon, 22 Jun 2015 14:00:27 -0300</pubDate>
      <author>andre@y7mail.com (André Almar)</author>
      <guid>http://andrealmar.com/2015/06/how-to-configure-proxy-in-play-framework/</guid>
      <description>&lt;p&gt;If you are struggling to get Play Framework up and running and you are behind a proxy server here is the solution.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go to your Play directory (in my case was:&lt;em&gt; /home/andrealmar/softwares/play&lt;/em&gt;)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Create the file &lt;strong&gt;activatorconfig.txt&lt;/strong&gt; in&lt;em&gt; ~/.activator/&lt;/em&gt; directory&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;vim ~/.activator/activatorconfig.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Put the configs below inside your activatorconfig.txt&lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;http://gist.github.com/744e02d247335f0a8d6f.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;And that&amp;rsquo;s it. Now you can use the &lt;em&gt;activator run&lt;/em&gt; command and it will pass through your proxy without any problems.&lt;/p&gt;

&lt;p&gt;See ya!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Playing with Play Framework and JSch - Java Secure Channel</title>
      <link>http://andrealmar.com/2015/03/playing-with-play-framework-and-jsch-java-secure-channel/</link>
      <pubDate>Thu, 05 Mar 2015 14:20:27 -0300</pubDate>
      <author>andre@y7mail.com (André Almar)</author>
      <guid>http://andrealmar.com/2015/03/playing-with-play-framework-and-jsch-java-secure-channel/</guid>
      <description>&lt;p&gt;Today I&amp;rsquo;m gonna show you how to use the the Java library &lt;em&gt;JSch - Java Secure Channel&lt;/em&gt; to connect to a server and send SSH commands to a UNIX shell and then return the output to our webpage. I&amp;rsquo;m using &lt;em&gt;Play Framework&lt;/em&gt; to develop this webapp. If you want to know more about Play Framework just visit &lt;a href=&#34;http://www.playframework.com&#34; title=&#34;http://www.playframework.com&#34;&gt;http://www.playframework.com&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
A little bit about &lt;em&gt;JSch&lt;/em&gt;:
&lt;em&gt;JSch&lt;/em&gt; is a pure Java implementation of &lt;a href=&#34;http://ietf.org/html.charters/secsh-charter.html&#34; target=&#34;_blank&#34;&gt;SSH2&lt;/a&gt;.&lt;br /&gt;
&lt;em&gt;JSch&lt;/em&gt; allows you to connect to an sshd server and use port forwarding, X11 forwarding, file transfer, etc., and you can integrate its functionality into your own Java programs. &lt;em&gt;JSch&lt;/em&gt; is licensed under &lt;a href=&#34;http://www.jcraft.com/jsch/LICENSE.txt&#34;&gt;BSD style license&lt;/a&gt;.&lt;/p&gt;
You can find more information about the library in &lt;a href=&#34;http://www.jcraft.com/jsch/&#34;&gt;http://www.jcraft.com/jsch/&lt;/a&gt;
&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Case scenario:&lt;/strong&gt;&lt;br /&gt;
I want to send a SSH command to an UNIX server via some Java class. I want to the output of this command that I sent is shown in the user&amp;rsquo;s screen through the web browser.
Our environment uses a Private Key to allow SSH connections between one machine to another. In the code snippets you will see that the keys are passed through the method:&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jsch.addIdentity();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;
1st: the code snippet for the controller &lt;em&gt;Application.java&lt;/em&gt;:&lt;/p&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;http://gist.github.com/68c6d49d4dad3d24642c.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;&lt;br /&gt;
2nd: the code snippet for the controller Control.java:&lt;/p&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;http://gist.github.com/26d6005e35cd3a1c6911.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;&lt;br /&gt;
Output of the command being displayed in a web browser:&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&#34;http://andrealmar.com/images/play-JSch.png&#34;&gt;&lt;br /&gt;
That&amp;rsquo;s all. See ya next time!&lt;/p&gt;

&lt;p&gt;{}&amp;rsquo;s&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>