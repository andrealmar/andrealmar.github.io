<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on This Coding Life</title>
    <link>http://andrealmar.com/categories/docker/</link>
    <description>Recent content in Docker on This Coding Life</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>andre@y7mail.com (André Almar)</managingEditor>
    <webMaster>andre@y7mail.com (André Almar)</webMaster>
    <copyright>© 2016 Andre Almar, All Rights Reserved</copyright>
    <lastBuildDate>Mon, 04 Apr 2016 20:50:27 -0300</lastBuildDate>
    <atom:link href="http://andrealmar.com/categories/docker/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Containerizing your applications with Docker - Part 2</title>
      <link>http://andrealmar.com/2016/04/containerizing-your-applications-with-docker-part-ii/</link>
      <pubDate>Mon, 04 Apr 2016 20:50:27 -0300</pubDate>
      <author>andre@y7mail.com (André Almar)</author>
      <guid>http://andrealmar.com/2016/04/containerizing-your-applications-with-docker-part-ii/</guid>
      <description>

&lt;p&gt;Ready for Part 2? If you don&amp;rsquo;t read, please read &lt;a href=&#34;http://andrealmar.com/2016/04/containerizing-your-applications-with-docker-part-i/&#34;&gt;Part 1&lt;/a&gt; which will give you a brief introduction in some concepts that you will need to grasp before get your hands dirty with Docker. Ok? So&amp;hellip;.Let&amp;rsquo;s get started.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;
&lt;img src=&#34;http://andrealmar.com/images/docker.jpg&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;docker-image&#34;&gt;Docker Image&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Docker images are the basis of containers. It&amp;rsquo;s an encapsulated environment ready to be replicated wherever you want. Each time you’ve used &lt;em&gt;docker run&lt;/em&gt; you told it which image you wanted.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the previous section of our tutorial you used a Docker image that already exists, the &lt;em&gt;library/hello-world&lt;/em&gt; image.&lt;/p&gt;

&lt;p&gt;Remember that we did:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run hello-world
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then we saw this output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Unable to find image &#39;hello-world:latest&#39; locally
latest: Pulling from library/hello-world
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Docker stores downloaded images on the Docker host. If an image isn’t already present on the host then it’ll be downloaded from a registry: by default the &lt;a href=&#34;https://registry.hub.docker.com/&#34;&gt;Docker Hub Registry&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want to see a list of images that you have locally you can do it by using the command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker images
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In my case it shows those three images that I have locally:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
kartoza/postgis     latest              c209e16e71f7        5 days ago          496.1 MB
ubuntu              latest              97434d46f197        2 weeks ago         188 MB
hello-world         latest              690ed74de00f        5 months ago        960 B
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Docker also allows us to create our own images using a definition file called Dockerfile. With Dockerfile we can specify instructions and commands that tell Docker how to build our image. It&amp;rsquo;s literally a recipe.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s create our image and in order to do that first we have to create a Dockerfile. Create a directory and inside that directory create a Dockerfile.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir directory_name
cd directory_name
touch Dockerfile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Pause to teach you some Docker commands&amp;hellip;&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;docker-basic-commands&#34;&gt;Docker basic commands&lt;/h2&gt;

&lt;p&gt;Here is a list of a very basic Docker commands that you are going to use often:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run &amp;lt;image&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command will take any image, it will create a new container from the image and start that container.&lt;/p&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code&gt;docker start &amp;lt;name|id&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Start an existing container that is not running.&lt;/p&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code&gt;docker stop &amp;lt;name|id&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When a container is running you can use this command to stop the execution of that container.&lt;/p&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code&gt;docker ps [-a include stopped containers]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Gives you a list of all your running containers. If you use the flag &lt;em&gt;-a&lt;/em&gt; it will show you all the stopped containers as well.&lt;/p&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code&gt;docker rm &amp;lt;name|id&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remove / Delete a container&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Let&amp;rsquo;s continue creating our image&amp;hellip; We are creating a PostgreSQL 9.3 image in this tutorial.&lt;/p&gt;

&lt;p&gt;Our Dockerfile will have to be like this:&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/andrealmar/bce56f7d8450990333703aa5c4ac8d61.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;The Dockerfile is self-explanatory, it&amp;rsquo;s well commented and if you have any questions please leave a comment below.&lt;/p&gt;

&lt;p&gt;Now we have to &lt;strong&gt;build&lt;/strong&gt; our image. Let&amp;rsquo;s do this by typing the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker build -t andrealmar/postgresql:9.3 .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You’ve specified our docker build command and used the -t flag to identify our new image as andrealmar/postgresql:9.3 and also specified the location of our Dockerfile using the . to indicate a Dockerfile in the current directory.&lt;/p&gt;

&lt;p&gt;Services are built once and then tagged as postgresql:9.3. If you change a service&amp;rsquo;s Dockerfile or the contents of its build directory, run &lt;em&gt;docker-compose build&lt;/em&gt; to rebuild it.&lt;/p&gt;

&lt;p&gt;The Output will be something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Sending build context to Docker daemon 19.97 kB
Step 1 : FROM ubuntu
 ---&amp;gt; 97434d46f197
Step 2 : MAINTAINER Andre Almar &amp;lt;andre@pydevv.com&amp;gt;
 ---&amp;gt; Using cache
 ---&amp;gt; 70763ebda914
Step 3 : RUN apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8
 ---&amp;gt; Using cache
 ---&amp;gt; 9baa8c54442c
Step 4 : RUN echo &amp;quot;deb http://apt.postgresql.org/pub/repos/apt/ precise-pgdg main&amp;quot; &amp;gt; /etc/apt/sources.list.d/pgdg.list
 ---&amp;gt; Using cache
 ---&amp;gt; e86e2f540ecb
Step 5 : RUN apt-get update &amp;amp;&amp;amp; apt-get install -y python-software-properties software-properties-common postgresql-9.3 postgresql-client-9.3 postgresql-contrib-9.3
 ---&amp;gt; Using cache
 ---&amp;gt; 69d82fd86acd
Step 6 : USER postgres
 ---&amp;gt; Using cache
 ---&amp;gt; cd2593bf4bbe
Step 7 : RUN /etc/init.d/postgresql start &amp;amp;&amp;amp;    psql --command &amp;quot;CREATE USER docker WITH SUPERUSER PASSWORD &#39;docker&#39;;&amp;quot; &amp;amp;&amp;amp;        createdb -O docker docker
 ---&amp;gt; Using cache
 ---&amp;gt; 9dbf59e35474
Step 8 : RUN echo &amp;quot;host all  all    0.0.0.0/0  md5&amp;quot; &amp;gt;&amp;gt; /etc/postgresql/9.3/main/pg_hba.conf
 ---&amp;gt; Using cache
 ---&amp;gt; 327f7dc70201
Step 9 : RUN echo &amp;quot;listen_addresses=&#39;*&#39;&amp;quot; &amp;gt;&amp;gt; /etc/postgresql/9.3/main/postgresql.conf
 ---&amp;gt; Using cache
 ---&amp;gt; 1b146766f710
Step 10 : EXPOSE 5432
 ---&amp;gt; Using cache
 ---&amp;gt; e950c34ec810
Step 11 : VOLUME /etc/postgresql /var/log/postgresql /var/lib/postgresql
 ---&amp;gt; Using cache
 ---&amp;gt; 5d15ea251ef9
Step 12 : CMD /usr/lib/postgresql/9.3/bin/postgres -D /var/lib/postgresql/9.3/main -c config_file=/etc/postgresql/9.3/main/postgresql.conf
 ---&amp;gt; Running in dc23742bbefd
 ---&amp;gt; 5e614bcb798e
Removing intermediate container dc23742bbefd
Successfully built 5e614bcb798e
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our image was successfully built. Yay!!!&lt;/p&gt;

&lt;p&gt;Now we have to run a container:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run --rm -P --name pg_test andrealmar/postgresql:9.3
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: The &amp;ndash;rm removes the container and its image when the container exits successfully.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We&amp;rsquo;ve built our image locally but we can push the image to the Docker Hub repository.&lt;/p&gt;

&lt;p&gt;Go to &lt;a href=&#34;https://hub.docker.com/&#34;&gt;https://hub.docker.com/&lt;/a&gt; and register an account. Now in your terminal type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker login
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Insert your credentials and you are ready to push your image to Docker Hub.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker push andrealmar/postgresql:9.3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output will be something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;The push refers to a repository [docker.io/andrealmar/postgresql]
25061686dd38: Pushed 
f3348af5962c: Pushed 
dad10331254a: Pushed 
601598d231fc: Pushed 
d0448568fb1f: Pushed 
7fedc9eff662: Pushed 
5f70bf18a086: Mounted from kartoza/postgis 
1b82ce694c3b: Mounted from library/ubuntu 
db6b2d84f3c6: Mounted from library/ubuntu 
05b940eef08d: Mounted from library/ubuntu 
9.3: digest: sha256:ba69f101c2b8b4536bab692b83b528bbb8c9bd7931d5740840c7417833b52300 size: 10429
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you go to your Docker Hub account you will see that your image is published.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://andrealmar.com/images/docker_hub.png&#34;&gt;&lt;/p&gt;

&lt;p&gt;Ok, now that we&amp;rsquo;ve built the PostgreSQL 9.3 image we have to run.&lt;/p&gt;

&lt;p&gt;Please &lt;strong&gt;PAY ATTENTION&lt;/strong&gt; here because it will free you from headaches. I&amp;rsquo;ve lost a bunch of time trying to figure out this but with the help of &lt;em&gt;Sebastiaan van Stijn&lt;/em&gt; - &lt;a href=&#34;https://github.com/thaJeztah&#34;&gt;https://github.com/thaJeztah&lt;/a&gt; I was able to do this right.&lt;/p&gt;

&lt;p&gt;The command below will run the container. When running on &lt;strong&gt;OS X&lt;/strong&gt;, the docker daemon (and containers) are running in a Virtual Machine.&lt;/p&gt;

&lt;p&gt;If you want to access the PostgreSQL database from your OS X machine, you need to &lt;em&gt;&amp;ldquo;publish&amp;rdquo;&lt;/em&gt; the container&amp;rsquo;s port, to make them publicly accessible.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -d -p 2345:5432 andrealmar/postgresql:9.3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Publishes port 5432 of the container on port 2345 on the host (the virtual machine in my case).&lt;/p&gt;

&lt;p&gt;To access, use the IP-address of the virtual machine, which you can obtain via docker-machine:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker-machine ip
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;192.168.99.100
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You container is running so you are good to connect:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;psql -h 192.168.99.100 -p 2345 -U docker docker
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;psql (9.5.1, server 9.3.12)
SSL connection (protocol: TLSv1.2, cipher: DHE-RSA-AES256-GCM-SHA384, bits: 256, compression: off)
Type &amp;quot;help&amp;quot; for help.

docker=# 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See you on Part 3.&lt;/p&gt;

&lt;p&gt;Bye,&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/v1.5/compose/cli/&#34;&gt;https://docs.docker.com/v1.5/compose/cli/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://docs.docker.com/engine/examples/postgresql_service/&#34;&gt;https://docs.docker.com/engine/examples/postgresql_service/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://www.andreagrandi.it/2015/02/21/how-to-create-a-docker-image-for-postgresql-and-persist-data/&#34;&gt;https://www.andreagrandi.it/2015/02/21/how-to-create-a-docker-image-for-postgresql-and-persist-data/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://www.mundodocker.com.br/&#34;&gt;http://www.mundodocker.com.br/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://github.com/wsargent/docker-cheat-sheet&#34;&gt;https://github.com/wsargent/docker-cheat-sheet&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Containerizing your applications with Docker - Part 1</title>
      <link>http://andrealmar.com/2016/04/containerizing-your-applications-with-docker-part-i/</link>
      <pubDate>Mon, 04 Apr 2016 15:50:27 -0300</pubDate>
      <author>andre@y7mail.com (André Almar)</author>
      <guid>http://andrealmar.com/2016/04/containerizing-your-applications-with-docker-part-i/</guid>
      <description>

&lt;p&gt;Docker. First time I&amp;rsquo;ve heard about Docker and I did some research on this topic, I couldn&amp;rsquo;t understand what Docker was. I&amp;rsquo;m used to Virtual Machines, Vagrant and so on. I thought they (Docker and Vagrant) were the same thing but I was completely wrong. Let&amp;rsquo;s make first a brief introduction to some concepts to clarify what Docker is and how can we use it.&lt;/p&gt;

&lt;h2 id=&#34;what-is-a-virtual-machine-vm&#34;&gt;What is a Virtual Machine (VM)?&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;In computing, a virtual machine (VM) is an emulation of a particular computer system. Virtual machines operate based on the computer architecture and functions of a real or hypothetical computer, and their implementations may involve specialized hardware, software, or a combination of both.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A virtual machine (VM) is a software implementation of a machine (for example, a computer) that executes programs like a physical machine.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://andrealmar.com/images/virtual_machine.png&#34;&gt;&lt;/p&gt;

&lt;p&gt;Each virtual machine includes the application, the necessary binaries and libraries and an entire guest operating system - all of which &lt;strong&gt;may be tens of GBs in size&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;what-is-vagrant&#34;&gt;What is Vagrant?&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Vagrant is a tool for building complete development environments. With an easy-to-use workflow and focus on automation, Vagrant lowers development environment setup time, increases development/production parity, and makes the &amp;ldquo;works on my machine&amp;rdquo; excuse a relic of the past.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is very interesting because it facilitates when a new developer is hired. All your new hire will need to do is to execute a simple command and the environment is set up.&lt;/p&gt;

&lt;p&gt;You run a provisioning script against your virtual machine exactly as you would against a production or staging machine. In the provisioning script you tell Vagrant to install the correct version of Python, Django, set up the user permissions, configure anything that needs to be configured and so on&amp;hellip;&lt;/p&gt;

&lt;p&gt;In other words you can automate the creation of your environments. But, you are &lt;strong&gt;not&lt;/strong&gt; free from Virtual Machines. You can use different VM providers to work along with Vagrant but you &lt;strong&gt;have&lt;/strong&gt; to use one otherwise Vagrant won&amp;rsquo;t work. The most common is &lt;a href=&#34;http://www.virtualbox.org&#34;&gt;VirtualBox&lt;/a&gt;. Also, there are a lot of premade “boxes” ready to use. You can search them using:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://atlas.hashicorp.com/boxes/search&#34;&gt;https://atlas.hashicorp.com/boxes/search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.vagrantbox.es/&#34;&gt;http://www.vagrantbox.es/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://andrealmar.com/images/vagrant.png&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Vagrant in a nutshell:&lt;/strong&gt; Different boxes and we put our code in those different boxes.&lt;/p&gt;

&lt;h2 id=&#34;what-is-a-container&#34;&gt;What is a Container?&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://andrealmar.com/images/container.jpg&#34;&gt;&lt;/p&gt;

&lt;p&gt;Simple. Is something that looks like the photo above. =P Naahh&amp;hellip;just kidding.&lt;/p&gt;

&lt;p&gt;Containers have similar resource isolation and allocation benefits as virtual machines but a different architectural approach allows them to be much more portable and efficient.&lt;/p&gt;

&lt;p&gt;This whole idea is based on LXC (Linux Containers). LXC (Linux Containers) is an operating-system-level virtualization method for running multiple isolated Linux systems (containers) on a control host using a single Linux kernel.&lt;/p&gt;

&lt;p&gt;With container-based virtualization, there isn&amp;rsquo;t the overhead associated with having each guest run a completely installed operating system. This approach can also improve performance because there is just one operating system taking care of hardware calls. A disadvantage of container-based virtualization, however, is that each guest must use the same operating system the host uses.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://andrealmar.com/images/lxc.png&#34;&gt;&lt;/p&gt;

&lt;p&gt;Containers include the application and all of its dependencies, but &lt;em&gt;share the kernel&lt;/em&gt; with other containers. They run as an isolated process in userspace on the host operating system. They’re also &lt;em&gt;not tied&lt;/em&gt; to any specific infrastructure – for example, Docker containers run on &lt;em&gt;any computer&lt;/em&gt;, on &lt;em&gt;any infrastructure&lt;/em&gt; and in any cloud.&lt;/p&gt;

&lt;h1 id=&#34;what-is-docker&#34;&gt;What is Docker?&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Docker containers wrap up a piece of software in a complete filesystem that contains everything it needs to run: code, runtime, system tools, system libraries – anything you can install on a server. This guarantees that it will always run the same, regardless of the environment it is running in.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In Docker we can build our environment and run anywhere. If a machine has Docker on it the container is going to run and is going to work.&lt;/p&gt;

&lt;p&gt;They act as Virtual Machines but they are really self-contained processes. You are really packaging a whole application or an entire environment inside a container.&lt;/p&gt;

&lt;p&gt;You build your image once, push it to Docker Hub or Quay.io and now you can run your image anywhere.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://andrealmar.com/images/containers_diagram.png&#34;&gt;&lt;/p&gt;

&lt;h1 id=&#34;installing-docker&#34;&gt;Installing Docker&lt;/h1&gt;

&lt;p&gt;I&amp;rsquo;m assuming you&amp;rsquo;re using Mac OS, for other OS follow the instructions on Docker homepage (&lt;a href=&#34;http://www.docker.com&#34;&gt;http://www.docker.com&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Go to the homepage (&lt;a href=&#34;http://www.docker.com&#34;&gt;http://www.docker.com&lt;/a&gt;), click on the &lt;em&gt;Get Started with Docker&lt;/em&gt; link. This will redirect you to &lt;a href=&#34;https://docs.docker.com/mac/&#34;&gt;https://docs.docker.com/mac/&lt;/a&gt; and then click on &lt;em&gt;Go to the next page to install&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The next page will tell you that because Docker Engine daemon uses Linux-specific kernel features, you can&amp;rsquo;t run Docker Engine natively in OS X. This is changing: &lt;a href=&#34;https://blog.docker.com/2016/03/docker-for-mac-windows-beta/&#34;&gt;https://blog.docker.com/2016/03/docker-for-mac-windows-beta/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But for this tutorial we are going to use the &amp;ldquo;old&amp;rdquo; way!? Make sure your Mac is running OS X 10.8 “Mountain Lion” or newer to run Docker software. Install Docker Toolbox &lt;a href=&#34;https://www.docker.com/products/docker-toolbox&#34;&gt;https://www.docker.com/products/docker-toolbox&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go to your launcher and click the Docker Quickstart Terminal:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://andrealmar.com/images/docker_quickstart_launcher.png&#34;&gt;&lt;/p&gt;

&lt;p&gt;A Terminal window will show up.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://andrealmar.com/images/docker_terminal.png&#34;&gt;&lt;/p&gt;

&lt;p&gt;We are ready to test our Docker installation. To do that just type in your terminal the command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run hello-world
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you see this output below, you succeeded installing Docker:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Unable to find image &#39;hello-world:latest&#39; locally
latest: Pulling from library/hello-world

03f4658f8b78: Pull complete 
a3ed95caeb02: Pull complete 
Digest: sha256:8be990ef2aeb16dbcb9271ddfe2610fa6658d13f6dfb8bc72074cc1ca36966a7
Status: Downloaded newer image for hello-world:latest

Hello from Docker.
This message shows that your installation appears to be working correctly.

To generate this message, Docker took the following steps:
 1. The Docker client contacted the Docker daemon.
 2. The Docker daemon pulled the &amp;quot;hello-world&amp;quot; image from the Docker Hub.
 3. The Docker daemon created a new container from that image which runs the
    executable that produces the output you are currently reading.
 4. The Docker daemon streamed that output to the Docker client, which sent it
    to your terminal.

To try something more ambitious, you can run an Ubuntu container with:
 $ docker run -it ubuntu bash

Share images, automate workflows, and more with a free Docker Hub account:
 https://hub.docker.com

For more examples and ideas, visit:
 https://docs.docker.com/userguide/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See you on Part 2.&lt;/p&gt;

&lt;p&gt;Bye,&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Virtual_machine&#34;&gt;https://en.wikipedia.org/wiki/Virtual_machine&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://www.docker.com/what-docker&#34;&gt;https://www.docker.com/what-docker&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://en.wikipedia.org/wiki/LXC&#34;&gt;https://en.wikipedia.org/wiki/LXC&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://www.mundodocker.com.br/&#34;&gt;http://www.mundodocker.com.br/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>